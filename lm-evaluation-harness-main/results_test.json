{
  "results": {
    "kobest_wic": {
      "acc,none": 0.4880952380952381,
      "acc_stderr,none": 0.014087502464604038,
      "f1,none": 0.328,
      "f1_stderr,none": "N/A",
      "alias": "kobest_wic"
    },
    "kobest_sentineg": {
      "acc,none": 0.6070528967254408,
      "acc_stderr,none": 0.024543286709027976,
      "f1,none": 0.6064911299750928,
      "f1_stderr,none": "N/A",
      "alias": "kobest_sentineg"
    },
    "kobest_hellaswag": {
      "acc,none": 0.406,
      "acc_stderr,none": 0.02198396209008634,
      "f1,none": 0.4035837094197622,
      "f1_stderr,none": "N/A",
      "acc_norm,none": 0.526,
      "acc_norm_stderr,none": 0.02235279165091416,
      "alias": "kobest_hellaswag"
    },
    "kobest_copa": {
      "acc,none": 0.667,
      "acc_stderr,none": 0.014910846164229863,
      "f1,none": 0.6656730563606956,
      "f1_stderr,none": "N/A",
      "alias": "kobest_copa"
    },
    "kobest_boolq": {
      "acc,none": 0.48646723646723644,
      "acc_stderr,none": 0.013343877331262025,
      "f1,none": 0.3356212528426711,
      "f1_stderr,none": "N/A",
      "alias": "kobest_boolq"
    }
  },
  "group_subtasks": {
    "kobest_boolq": [],
    "kobest_copa": [],
    "kobest_hellaswag": [],
    "kobest_sentineg": [],
    "kobest_wic": []
  },
  "configs": {
    "kobest_boolq": {
      "task": "kobest_boolq",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "{{paragraph}} 질문: {{question}} 답변: ",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "아니오",
        "예"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_copa": {
      "task": "kobest_copa",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "copa",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def copa_doc_to_text(doc: dict) -> str:\n    connector = {\"원인\": \" 왜냐하면\", \"결과\": \" 그래서\"}[doc[\"question\"].strip()]\n    return f\"\"\"{doc[\"premise\"]} {connector}\"\"\"\n",
      "doc_to_target": "def copa_doc_to_target(doc: dict) -> str:\n    correct_choice = doc[\"alternative_1\"] if doc[\"label\"] == 0 else doc[\"alternative_2\"]\n    return f\"\"\"{correct_choice}\"\"\"\n",
      "doc_to_choice": "def copa_doc_to_choice(doc: dict) -> list:\n    return [f\"\"\"{doc[\"alternative_1\"]}\"\"\", f\"\"\"{doc[\"alternative_2\"]}\"\"\"]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_hellaswag": {
      "task": "kobest_hellaswag",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "hellaswag",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def hellaswag_process_doc(doc: Dataset) -> Dataset:\n    def preprocessor(dataset):\n        return {\n            \"query\": f\"\"\"문장: {dataset[\"context\"]}\"\"\",\n            \"choices\": [\n                dataset[\"ending_1\"],\n                dataset[\"ending_2\"],\n                dataset[\"ending_3\"],\n                dataset[\"ending_4\"],\n            ],\n            \"gold\": int(dataset[\"label\"]),\n        }\n\n    return doc.map(preprocessor)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_sentineg": {
      "task": "kobest_sentineg",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "sentineg",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def sentineg_doc_to_text(doc: dict):\n    return f\"\"\"문장: {doc[\"sentence\"]} 긍부정:\"\"\"\n",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "부정",
        "긍정"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_wic": {
      "task": "kobest_wic",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "wic",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def wic_doc_to_text(doc: dict) -> str:\n    return f\"\"\"문장1: {doc[\"context_1\"]} 문장2: {doc[\"context_2\"]} 두 문장에서 {doc[\"word\"]}가 같은 뜻으로 쓰였나?\"\"\"\n",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "아니오",
        "예"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "kobest_boolq": 1.0,
    "kobest_copa": 1.0,
    "kobest_hellaswag": 1.0,
    "kobest_sentineg": 1.0,
    "kobest_wic": 1.0
  },
  "n-shot": {
    "kobest_boolq": 0,
    "kobest_copa": 0,
    "kobest_hellaswag": 0,
    "kobest_sentineg": 0,
    "kobest_wic": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=/ssd_1/jaesin/hf/hub/models--skt--ko-gpt-trinity-1.2B-v0.5/snapshots/33f84c0da333d34533f0cfbe8f5972022d681e96",
    "batch_size": "8",
    "batch_sizes": [],
    "device": "cuda:1",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": "3196e907",
  "date": 1713855046.4723513,
  "pretty_env_info": "PyTorch version: 2.2.2+cu118\nIs debug build: False\nCUDA used to build PyTorch: 11.8\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 18.04.6 LTS (x86_64)\nGCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.1\nLibc version: glibc-2.27\n\nPython version: 3.10.14 (main, Mar 21 2024, 16:24:04) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.15.0-213-generic-x86_64-with-glibc2.27\nIs CUDA available: True\nCUDA runtime version: 9.1.85\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: Quadro RTX 8000\nGPU 1: Quadro RTX 8000\nGPU 2: Quadro RTX 8000\nGPU 3: Quadro RTX 8000\nGPU 4: Quadro RTX 8000\nGPU 5: Quadro RTX 8000\nGPU 6: Quadro RTX 8000\n\nNvidia driver version: 530.30.02\ncuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              64\nOn-line CPU(s) list: 0-63\nThread(s) per core:  2\nCore(s) per socket:  16\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               85\nModel name:          Intel(R) Xeon(R) Gold 6226R CPU @ 2.90GHz\nStepping:            7\nCPU MHz:             2689.738\nCPU max MHz:         3900.0000\nCPU min MHz:         1200.0000\nBogoMIPS:            5800.00\nVirtualization:      VT-x\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            1024K\nL3 cache:            22528K\nNUMA node0 CPU(s):   0-15,32-47\nNUMA node1 CPU(s):   16-31,48-63\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single intel_ppin ssbd mba ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb intel_pt avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts hwp hwp_act_window hwp_epp hwp_pkg_req pku ospke avx512_vnni md_clear flush_l1d arch_capabilities\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.2.2+cu118\n[pip3] torchvision==0.17.2+cu118\n[pip3] triton==2.2.0\n[conda] cudatoolkit               11.8.0              h4ba93d1_13    conda-forge\n[conda] numpy                     1.26.4          py310hb13e2d6_0    conda-forge\n[conda] torch                     2.2.2+cu118              pypi_0    pypi\n[conda] torchvision               0.17.2+cu118             pypi_0    pypi\n[conda] triton                    2.2.0                    pypi_0    pypi",
  "transformers_version": "4.40.0",
  "upper_git_hash": "49af0ed2e4cf23700f7d26aee26ad5bf86bdc9fc"
}