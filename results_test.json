{
  "results": {
    "kobest_wic": {
      "acc,none": 0.5015873015873016,
      "acc_stderr,none": 0.014091426211413174,
      "f1,none": 0.37998928097938,
      "f1_stderr,none": "N/A",
      "alias": "kobest_wic"
    },
    "kobest_sentineg": {
      "acc,none": 0.7934508816120907,
      "acc_stderr,none": 0.020343426461753262,
      "f1,none": 0.7918329240843054,
      "f1_stderr,none": "N/A",
      "alias": "kobest_sentineg"
    },
    "kobest_hellaswag": {
      "acc,none": 0.49,
      "acc_stderr,none": 0.02237859698923078,
      "f1,none": 0.488329367977311,
      "f1_stderr,none": "N/A",
      "acc_norm,none": 0.512,
      "acc_norm_stderr,none": 0.02237662679792717,
      "alias": "kobest_hellaswag"
    },
    "kobest_copa": {
      "acc,none": 0.697,
      "acc_stderr,none": 0.014539683710535262,
      "f1,none": 0.6969124076858212,
      "f1_stderr,none": "N/A",
      "alias": "kobest_copa"
    },
    "kobest_boolq": {
      "acc,none": 0.5078347578347578,
      "acc_stderr,none": 0.013347128611565716,
      "f1,none": 0.3468699151141741,
      "f1_stderr,none": "N/A",
      "alias": "kobest_boolq"
    }
  },
  "group_subtasks": {
    "kobest_boolq": [],
    "kobest_copa": [],
    "kobest_hellaswag": [],
    "kobest_sentineg": [],
    "kobest_wic": []
  },
  "configs": {
    "kobest_boolq": {
      "task": "kobest_boolq",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "{{paragraph}} 질문: {{question}} 답변: ",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "아니오",
        "예"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_copa": {
      "task": "kobest_copa",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "copa",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def copa_doc_to_text(doc: dict) -> str:\n    connector = {\"원인\": \" 왜냐하면\", \"결과\": \" 그래서\"}[doc[\"question\"].strip()]\n    return f\"\"\"{doc[\"premise\"]} {connector}\"\"\"\n",
      "doc_to_target": "def copa_doc_to_target(doc: dict) -> str:\n    correct_choice = doc[\"alternative_1\"] if doc[\"label\"] == 0 else doc[\"alternative_2\"]\n    return f\"\"\"{correct_choice}\"\"\"\n",
      "doc_to_choice": "def copa_doc_to_choice(doc: dict) -> list:\n    return [f\"\"\"{doc[\"alternative_1\"]}\"\"\", f\"\"\"{doc[\"alternative_2\"]}\"\"\"]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_hellaswag": {
      "task": "kobest_hellaswag",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "hellaswag",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "process_docs": "def hellaswag_process_doc(doc: Dataset) -> Dataset:\n    def preprocessor(dataset):\n        return {\n            \"query\": f\"\"\"문장: {dataset[\"context\"]}\"\"\",\n            \"choices\": [\n                dataset[\"ending_1\"],\n                dataset[\"ending_2\"],\n                dataset[\"ending_3\"],\n                dataset[\"ending_4\"],\n            ],\n            \"gold\": int(dataset[\"label\"]),\n        }\n\n    return doc.map(preprocessor)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_sentineg": {
      "task": "kobest_sentineg",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "sentineg",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def sentineg_doc_to_text(doc: dict):\n    return f\"\"\"문장: {doc[\"sentence\"]} 긍부정:\"\"\"\n",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "부정",
        "긍정"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "kobest_wic": {
      "task": "kobest_wic",
      "group": [
        "kobest"
      ],
      "dataset_path": "skt/kobest_v1",
      "dataset_name": "wic",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def wic_doc_to_text(doc: dict) -> str:\n    return f\"\"\"문장1: {doc[\"context_1\"]} 문장2: {doc[\"context_2\"]} 두 문장에서 {doc[\"word\"]}가 같은 뜻으로 쓰였나?\"\"\"\n",
      "doc_to_target": "{{label}}",
      "doc_to_choice": [
        "아니오",
        "예"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "f1",
          "aggregation": "def macro_f1_score(items):\n    unzipped_list = list(zip(*items))\n    golds = unzipped_list[0]\n    preds = unzipped_list[1]\n    fscore = f1_score(golds, preds, average=\"macro\")\n    return fscore\n",
          "average": "macro",
          "hf_evaluate": true,
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "kobest_boolq": 1.0,
    "kobest_copa": 1.0,
    "kobest_hellaswag": 1.0,
    "kobest_sentineg": 1.0,
    "kobest_wic": 1.0
  },
  "n-shot": {
    "kobest_boolq": 0,
    "kobest_copa": 0,
    "kobest_hellaswag": 0,
    "kobest_sentineg": 0,
    "kobest_wic": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=TeamUNIVA/Komodo_7B_v1.0.0",
    "batch_size": "8",
    "batch_sizes": [],
    "device": "cuda:2",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": "49af0ed",
  "date": 1713865322.8720653,
  "pretty_env_info": "PyTorch version: 2.2.1+cu118\nIs debug build: False\nCUDA used to build PyTorch: 11.8\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.4 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.22.1\nLibc version: glibc-2.35\n\nPython version: 3.10.14 (main, Mar 21 2024, 16:24:04) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-5.15.0-1053-nvidia-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.2.140\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-40GB\nGPU 1: NVIDIA A100-SXM4-40GB\nGPU 2: NVIDIA A100-SXM4-40GB\nGPU 3: NVIDIA A100-SXM4-40GB\nGPU 4: NVIDIA A100-SXM4-40GB\nGPU 5: NVIDIA A100-SXM4-40GB\nGPU 6: NVIDIA A100-SXM4-40GB\nGPU 7: NVIDIA A100-SXM4-40GB\n\nNvidia driver version: 535.161.08\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      43 bits physical, 48 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             256\nOn-line CPU(s) list:                0-255\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 7742 64-Core Processor\nCPU family:                         23\nModel:                              49\nThread(s) per core:                 2\nCore(s) per socket:                 64\nSocket(s):                          2\nStepping:                           0\nFrequency boost:                    enabled\nCPU max MHz:                        2250.0000\nCPU min MHz:                        1500.0000\nBogoMIPS:                           4491.55\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif v_spec_ctrl umip rdpid overflow_recov succor smca sme sev sev_es\nVirtualization:                     AMD-V\nL1d cache:                          4 MiB (128 instances)\nL1i cache:                          4 MiB (128 instances)\nL2 cache:                           64 MiB (128 instances)\nL3 cache:                           512 MiB (32 instances)\nNUMA node(s):                       8\nNUMA node0 CPU(s):                  0-15,128-143\nNUMA node1 CPU(s):                  16-31,144-159\nNUMA node2 CPU(s):                  32-47,160-175\nNUMA node3 CPU(s):                  48-63,176-191\nNUMA node4 CPU(s):                  64-79,192-207\nNUMA node5 CPU(s):                  80-95,208-223\nNUMA node6 CPU(s):                  96-111,224-239\nNUMA node7 CPU(s):                  112-127,240-255\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Mitigation; untrained return thunk; SMT enabled with STIBP protection\nVulnerability Spec rstack overflow: Mitigation; safe RET\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.2.1+cu118\n[pip3] torchvision==0.17.1+cu118\n[pip3] triton==2.2.0\n[conda] cudatoolkit               11.8.0              h4ba93d1_13    conda-forge\n[conda] numpy                     1.26.4          py310hb13e2d6_0    conda-forge\n[conda] torch                     2.2.1+cu118              pypi_0    pypi\n[conda] torchvision               0.17.1+cu118             pypi_0    pypi\n[conda] triton                    2.2.0                    pypi_0    pypi",
  "transformers_version": "4.40.0",
  "upper_git_hash": null
}